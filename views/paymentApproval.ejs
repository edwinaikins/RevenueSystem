<% pageTitle = 'Payment Approval' %>

<div class="container mt-4">
    <!-- Pending Payments Section -->
    <div class="card mb-4">
      <div class="card-header">
        <h3 class="card-title">Pending Payments</h3>
      </div>
      <div class="card-body">
        <table class="table table-bordered">
            <thead>
                <tr>
                  <th>Payment ID</th>
                  <th>Client ID</th>
                  <th>Entity Name</th>
                  <th>Entity Type</th>
                  <th>Details</th>
                  <th>Amount</th>
                  <th>Payment Date</th>
                  <th>Payment Type</th>
                  <th>JCR Ref</th>
                  <th>Actions</th>
                </tr>
              </thead>
              
          <tbody id="pendingPaymentsTable">
            <!-- Dynamic Content -->
          </tbody>
        </table>
      </div>
    </div>

    <!-- Modal for Rejection -->
    <div class="modal fade" id="paymentRejectionModal" tabindex="-1" role="dialog" aria-labelledby="rejectionModalLabel" aria-hidden="true">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="rejectionModalLabel">Reason for Rejection</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-body">
            <div class="form-group">
              <label for="rejectionReasonInput">Reason</label>
              <textarea id="rejectionReasonInput" class="form-control" rows="3" placeholder="Enter reason for rejection" required></textarea>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            <button type="button" class="btn btn-danger" onclick="submitRejection()">Submit</button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>

    let pendingPayments = [];

    async function fetchPendingPayments() {
      try {
        const response = await fetch('/payment/getPayments');
        const data = await response.json();
        pendingPayments = data.map(payment => ({
          paymentId: payment.payment_id,
          clientId: payment.client_id,
          entityName: payment.business_name || payment.house_number || payment.signage_name,
          entityType: payment.entity_type,
          details: payment.details,
          amount: parseFloat(payment.amount),
          paymentDate: new Date(payment.payment_date).toLocaleDateString(),
          paymentType: payment.payment_type,
          jcr_ref: payment.jcr_ref,
        }));
        renderPendingPayments(pendingPayments);
      } catch (error) {
        console.error('Error fetching pending payments:', error);
      }
    }

    function renderPendingPayments(payments) {
      const table = document.getElementById('pendingPaymentsTable');
      if (payments.length === 0) {
        table.innerHTML = `
        <tr>
            <td colspan="10" class="text-center">No pending payments.</td>
        </tr>
        `;
        return;
    }
      table.innerHTML = payments.map(payment => `
        <tr>
          <td>${payment.paymentId}</td>
          <td>${payment.clientId}</td>
          <td>${payment.entityName}</td>
          <td>${payment.entityType}</td>
          <td>${payment.details}</td>
          <td>${payment.amount}</td>
          <td>${payment.paymentDate}</td>
          <td>${payment.paymentType}</td>
          <td>${payment.jcr_ref}</td>
          <td>
        <button class="btn btn-success btn-sm" onclick="approvePayment('${payment.paymentId}')">Approve</button>
        <button class="btn btn-danger btn-sm" onclick="openRejectionModal('${payment.paymentId}')">Reject</button>
          </td>
        </tr>
      `).join('');
    }

    function openRejectionModal(paymentId) {
        document.getElementById('rejectionReasonInput').value = '';
        document.getElementById('rejectionReasonInput').dataset.paymentId = paymentId;

        const modal = new bootstrap.Modal(document.getElementById('paymentRejectionModal'));
        modal.show();
}

async function submitRejection() {
  const paymentId = document.getElementById('rejectionReasonInput').dataset.paymentId;
  const reason = document.getElementById('rejectionReasonInput').value;

  if (!reason.trim()) {
    alert('Please provide a reason for rejection.');
    return;
  }

  try {
    const response = await fetch(`rejectPayment/${paymentId}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ reason })
    });

    if (!response.ok) {
      throw new Error(`Failed to reject payment with status: ${response.status}`);
    }

    alert(`Payment rejected.`);
    
    const modalElement = document.getElementById('paymentRejectionModal');
    const modal = bootstrap.Modal.getInstance(modalElement);
    modal.hide();

    // Refresh the list of pending payments
    fetchPendingPayments();
  } catch (error) {
    console.error('Error rejecting payment:', error);
    alert('An error occurred while rejecting the payment. Please try again.');
  }
}


    async function approvePayment(paymentId) {
  if (!confirm(`Are you sure you want to approve Payment`)) {
    return;
  }

  const approveButton = document.querySelector(`[data-id="${paymentId}"]`);
  if (approveButton) approveButton.disabled = true;

  try {
    const response = await fetch(`approvePayment/${paymentId}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
    });

    if (!response.ok) {
      throw new Error(`Server responded with status ${response.status}`);
    }

    alert(`Payment approved.`);
    fetchPendingPayments();
  } catch (error) {
    console.error('Error approving payment:', error);
    alert('Failed to approve payment. Please try again.');
  } finally {
    if (approveButton) approveButton.disabled = false;
  }
}


    document.addEventListener('DOMContentLoaded', fetchPendingPayments);
  </script>